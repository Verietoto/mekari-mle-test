# schemas.py
from pydantic import BaseModel, Field
from typing import Optional, Union, Dict, List, Any
from haystack.dataclasses import ChatMessage

class LLMInput(BaseModel):
    user_prompt: str = Field(..., description="User prompt for the LLM")


class LLMOutput(BaseModel):
    """
    Standardized output model for LLMNode.
    """
    output_text: str = Field(..., description="Final response text generated by the LLM or agent.")
    time_elapsed_sec: float = Field(..., description="Total time taken to generate the response.")
    tokens_used: Optional[Union[int, Dict[str, int]]] = Field(
        None,
        description="Token usage information, either total count or a dict with prompt/completion totals."
    )
    tools_used: Optional[List[Dict[str, Any]]] = Field(
        None,
        description="List of tools invoked by the agent, including arguments, results, and errors."
    )
    last_message: Optional[ChatMessage] = Field(
        None,
        description="The last ChatMessage object produced by the LLM or agent."
    )